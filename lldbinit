# One word aliases.
command alias alias command alias
alias unalias command unalias
alias import command script import
alias shell platform shell
alias history command history

# `disable` supports basic `breakpoint disable` behavior, all or by number.
# `disable` also supports disabling the currently stopped at breakpoint location.
command regex disable
s/(\d+(\.(\*|\d+))?)/breakpoint disable %1/
s/^$/script lldb.target.FindBreakpointByID(lldb.thread.GetStopReasonDataAtIndex(0)).FindLocationByID(lldb.thread.GetStopReasonDataAtIndex(1)).SetEnabled(False) if lldb.thread.stop_reason == lldb.eStopReasonBreakpoint else lldb.target.DisableAllBreakpoints()/

alias d disable
# Use `di` for disassemble, leaving `dis` for `breakpoint disable`
command unalias dis
alias dis disable
alias delete breakpoint delete

# Breakpoint helpers.
alias condition breakpoint modify --condition %1
alias ignore breakpoint modify --ignore-count %1
alias mainthread breakpoint modify --thread-index 1
command regex autocontinue
s/^$/breakpoint modify --auto-continue true/
s/(.+)/breakpoint modify --auto-continue %1/

# List registers, in order of calling convention.
alias args register read arg1 arg2 arg3 arg4 arg5 arg6

# Like `p` and `po`, but for variables not full expressions.
alias v frame variable --show-types --depth 1
alias vo frame variable -O

command regex e
s/(-.+)/expression %1/
s/(.+)/expression --show-types --depth 1 -- %1/
s/^$/expression/

# Globally set expression language.
alias swift settings set target.language swift

# Use `weak var` to prevent permenent strong references (leaks, etc).
command regex var
s/(.+): (.+) = (0x[[:xdigit:]]{7,})/call weak var $%1 = unsafeBitCast(%3, to: %2.self)/
s/(.+) = (0x[[:xdigit:]]{7,})/call weak var $%1 = unsafeBitCast(%2, to: AnyObject.self)/
s/(.+) = (.+)/call weak var $%1 = %2/

command regex po
s/(.*0x[[:xdigit:]]{7,}.*)/expression -l objc -O -- %1/
s/(.*)/expression -O -- %1/

# Use `f` for both `finish` and `frame select`.
command regex f
s/^$/finish/
s/(\d+)/frame select %1/

# Convenience `breakpoint command add` helper. See gdb's `commands`.
command regex commands
s/(-.+)/breakpoint command add %1/
s/(.+)/breakpoint command add -s python -o "%1"/

# Xcode calls breakpoint commands "actions"
alias action commands

# Convenience `help` command that works for Python API too.
command regex h
s/^(lldb(?:\..+)?)/script help(%1)/
s/^(SB.+)/script help(lldb.%1)/
s/(.*)/help %1/

# Mnemonic friendly symbol lookup.
#   lookup 0xabcdef00
#   lookup /pattern/
#   lookup exact_name
command regex lookup
s/(0x[[:xdigit:]]+)/image lookup -a %1/
s/\x2f(.+)\x2f?$/image lookup -r -n %1/
s/(.+)/image lookup -n %1/

command regex stop-hook
s/^$/target stop-hook list/
s/(-.+)/target stop-hook add %1/
s/(.+)/target stop-hook add -o "%1"/

# Reload python modules, for lldb command development.
command regex reload 's/(.+)/script reload(%1)/'

settings set stop-disassembly-count 8

# This modifies the default by:
# * showing stop-reason at the beginning
# * removing module and function name
# * removing tid and $pc
settings set thread-stop-format "thread ${thread.index}: {stop reason = ${thread.stop-reason}}{, name = '${thread.name}'}{, queue = '${thread.queue}'}{, activity = '${thread.info.activity.name}'}{, ${thread.info.trace_messages} messages}{, return value = ${thread.return-value}}{, completed expression = ${thread.completed-expression}}\n"

# This modifies the default by not including absolute and relative $pc of each frame
settings set frame-format "${frame.index}: {${module.file.basename}`}${function.name}{ ${line.file.basename}:${line.number}}{${function.is-optimized} [opt]}\n"

# https://github.com/kastiglione/lldb-helpers
import ~/src/lldb-helpers/criteria.py

# https://github.com/facebook/chisel
import /usr/local/opt/chisel/libexec/fblldb.py
# delete commands I don't use for the convenience of those I do use.
command script delete poobjc
command script delete pproperties
command script delete setinput
command script delete settext

# Extra config
command source ~/.lldbinit-local
